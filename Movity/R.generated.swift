//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `BottomSheetStoryboard`.
    static let bottomSheetStoryboard = _R.storyboard.bottomSheetStoryboard()
    /// Storyboard `CustomAlert`.
    static let customAlert = _R.storyboard.customAlert()
    /// Storyboard `CustomProgressHud`.
    static let customProgressHud = _R.storyboard.customProgressHud()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginStoryboard`.
    static let loginStoryboard = _R.storyboard.loginStoryboard()
    /// Storyboard `MainMapStoryboard`.
    static let mainMapStoryboard = _R.storyboard.mainMapStoryboard()
    /// Storyboard `RegistrationStoryboard`.
    static let registrationStoryboard = _R.storyboard.registrationStoryboard()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BottomSheetStoryboard", bundle: ...)`
    static func bottomSheetStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bottomSheetStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomAlert", bundle: ...)`
    static func customAlert(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customAlert)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomProgressHud", bundle: ...)`
    static func customProgressHud(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customProgressHud)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginStoryboard", bundle: ...)`
    static func loginStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainMapStoryboard", bundle: ...)`
    static func mainMapStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainMapStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegistrationStoryboard", bundle: ...)`
    static func registrationStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registrationStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 14 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AppBlue`.
    static let appBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppBlue")
    /// Color `AppDisabledGray`.
    static let appDisabledGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppDisabledGray")
    /// Color `AppGreen`.
    static let appGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGreen")
    /// Color `AppLightGray`.
    static let appLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightGray")
    /// Color `AppOrange`.
    static let appOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppOrange")
    /// Color `AppPlaceHolderGray`.
    static let appPlaceHolderGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppPlaceHolderGray")
    /// Color `AppRed`.
    static let appRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppRed")
    /// Color `AppWhite`.
    static let appWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppWhite")
    /// Color `LabelGray`.
    static let labelGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelGray")
    /// Color `SwitchThumb`.
    static let switchThumb = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwitchThumb")
    /// Color `SwitchTrack`.
    static let switchTrack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwitchTrack")
    /// Color `VioletLight`.
    static let violetLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "VioletLight")
    /// Color `appGray`.
    static let appGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppDisabledGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDisabledGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDisabledGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppPlaceHolderGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appPlaceHolderGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appPlaceHolderGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwitchThumb", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchThumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwitchTrack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchTrack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchTrack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "VioletLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violetLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violetLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppDisabledGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appDisabledGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appDisabledGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppLightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appLightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appLightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppPlaceHolderGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appPlaceHolderGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appPlaceHolderGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SwitchThumb", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchThumb(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchThumb.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SwitchTrack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchTrack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchTrack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "VioletLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violetLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violetLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "appGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGray.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 33 images.
  struct image {
    /// Image `AttentionIcon`.
    static let attentionIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AttentionIcon")
    /// Image `arrowLeft`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowLeft")
    /// Image `autoRecordIcon`.
    static let autoRecordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "autoRecordIcon")
    /// Image `batteryFull`.
    static let batteryFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "batteryFull")
    /// Image `batteryLow`.
    static let batteryLow = Rswift.ImageResource(bundle: R.hostingBundle, name: "batteryLow")
    /// Image `batteryMid`.
    static let batteryMid = Rswift.ImageResource(bundle: R.hostingBundle, name: "batteryMid")
    /// Image `calendarIcon`.
    static let calendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendarIcon")
    /// Image `cancelIcon`.
    static let cancelIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelIcon")
    /// Image `checkboxChecked`.
    static let checkboxChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkboxChecked")
    /// Image `checkboxUnchecked`.
    static let checkboxUnchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkboxUnchecked")
    /// Image `deviceButtonScheme`.
    static let deviceButtonScheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "deviceButtonScheme")
    /// Image `deviceIcon`.
    static let deviceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "deviceIcon")
    /// Image `deviceImage`.
    static let deviceImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "deviceImage")
    /// Image `empty_background`.
    static let empty_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_background")
    /// Image `eyeIcon`.
    static let eyeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeIcon")
    /// Image `favorits_background`.
    static let favorits_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorits_background")
    /// Image `filterIcon`.
    static let filterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "filterIcon")
    /// Image `heartIcon-1`.
    static let heartIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartIcon-1")
    /// Image `heartIcon`.
    static let heartIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "heartIcon")
    /// Image `infoIcon`.
    static let infoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "infoIcon")
    /// Image `loaderIcon`.
    static let loaderIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "loaderIcon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `okInCircleImage`.
    static let okInCircleImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "okInCircleImage")
    /// Image `photoPlaceholder`.
    static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder")
    /// Image `pulseHeartIcon`.
    static let pulseHeartIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pulseHeartIcon")
    /// Image `settingsIcon`.
    static let settingsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsIcon")
    /// Image `smallArrowLeft`.
    static let smallArrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallArrowLeft")
    /// Image `smallArrowRight`.
    static let smallArrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "smallArrowRight")
    /// Image `squareCheckBoxOff`.
    static let squareCheckBoxOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "squareCheckBoxOff")
    /// Image `squareCheckBoxOn`.
    static let squareCheckBoxOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "squareCheckBoxOn")
    /// Image `symptomIcon`.
    static let symptomIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "symptomIcon")
    /// Image `uploadIcon`.
    static let uploadIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "uploadIcon")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AttentionIcon", bundle: ..., traitCollection: ...)`
    static func attentionIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attentionIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowLeft", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "autoRecordIcon", bundle: ..., traitCollection: ...)`
    static func autoRecordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.autoRecordIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "batteryFull", bundle: ..., traitCollection: ...)`
    static func batteryFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batteryFull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "batteryLow", bundle: ..., traitCollection: ...)`
    static func batteryLow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batteryLow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "batteryMid", bundle: ..., traitCollection: ...)`
    static func batteryMid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.batteryMid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendarIcon", bundle: ..., traitCollection: ...)`
    static func calendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelIcon", bundle: ..., traitCollection: ...)`
    static func cancelIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkboxChecked", bundle: ..., traitCollection: ...)`
    static func checkboxChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkboxUnchecked", bundle: ..., traitCollection: ...)`
    static func checkboxUnchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxUnchecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deviceButtonScheme", bundle: ..., traitCollection: ...)`
    static func deviceButtonScheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deviceButtonScheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deviceIcon", bundle: ..., traitCollection: ...)`
    static func deviceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deviceIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deviceImage", bundle: ..., traitCollection: ...)`
    static func deviceImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deviceImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_background", bundle: ..., traitCollection: ...)`
    static func empty_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeIcon", bundle: ..., traitCollection: ...)`
    static func eyeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorits_background", bundle: ..., traitCollection: ...)`
    static func favorits_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorits_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filterIcon", bundle: ..., traitCollection: ...)`
    static func filterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartIcon", bundle: ..., traitCollection: ...)`
    static func heartIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "heartIcon-1", bundle: ..., traitCollection: ...)`
    static func heartIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "infoIcon", bundle: ..., traitCollection: ...)`
    static func infoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loaderIcon", bundle: ..., traitCollection: ...)`
    static func loaderIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loaderIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "okInCircleImage", bundle: ..., traitCollection: ...)`
    static func okInCircleImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.okInCircleImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pulseHeartIcon", bundle: ..., traitCollection: ...)`
    static func pulseHeartIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pulseHeartIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsIcon", bundle: ..., traitCollection: ...)`
    static func settingsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smallArrowLeft", bundle: ..., traitCollection: ...)`
    static func smallArrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallArrowLeft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smallArrowRight", bundle: ..., traitCollection: ...)`
    static func smallArrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smallArrowRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "squareCheckBoxOff", bundle: ..., traitCollection: ...)`
    static func squareCheckBoxOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squareCheckBoxOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "squareCheckBoxOn", bundle: ..., traitCollection: ...)`
    static func squareCheckBoxOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.squareCheckBoxOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "symptomIcon", bundle: ..., traitCollection: ...)`
    static func symptomIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.symptomIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uploadIcon", bundle: ..., traitCollection: ...)`
    static func uploadIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uploadIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "LoginStoryboard"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `StubView`.
    static let stubView = _R.nib._StubView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StubView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubView) instead")
    static func stubView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubView)
    }
    #endif

    static func stubView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
      return R.nib.stubView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _StubView.validate()
    }

    struct _StubView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StubView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "products_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'products_background' is used in nib 'StubView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try bottomSheetStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customAlert.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customProgressHud.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainMapStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registrationStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try root.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct bottomSheetStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BottomSheetViewController

      let bottomSheetVC = StoryboardViewControllerResource<BottomSheetViewController>(identifier: "bottomSheetVC")
      let bundle = R.hostingBundle
      let name = "BottomSheetStoryboard"

      func bottomSheetVC(_: Void = ()) -> BottomSheetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottomSheetVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.bottomSheetStoryboard().bottomSheetVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottomSheetVC' could not be loaded from storyboard 'BottomSheetStoryboard' as 'BottomSheetViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customAlert: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomAlertViewController

      let bundle = R.hostingBundle
      let name = "CustomAlert"
      let paymentAlertVC = StoryboardViewControllerResource<CustomAlertViewController>(identifier: "paymentAlertVC")

      func paymentAlertVC(_: Void = ()) -> CustomAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentAlertVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBlue' is used in storyboard 'CustomAlert', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppPlaceHolderGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPlaceHolderGray' is used in storyboard 'CustomAlert', but couldn't be loaded.") }
        }
        if _R.storyboard.customAlert().paymentAlertVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentAlertVC' could not be loaded from storyboard 'CustomAlert' as 'CustomAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customProgressHud: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customProgressHud = StoryboardViewControllerResource<ProgressHudViewController>(identifier: "customProgressHud")
      let name = "CustomProgressHud"

      func customProgressHud(_: Void = ()) -> ProgressHudViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customProgressHud)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purple' is used in storyboard 'CustomProgressHud', but couldn't be loaded.") }
        }
        if _R.storyboard.customProgressHud().customProgressHud() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customProgressHud' could not be loaded from storyboard 'CustomProgressHud' as 'ProgressHudViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "loginViewController")
      let name = "LoginStoryboard"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhite' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "VioletLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VioletLight' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.loginStoryboard().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginStoryboard' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainMapStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainMapViewController

      let bundle = R.hostingBundle
      let mainMapVC = StoryboardViewControllerResource<MainMapViewController>(identifier: "mainMapVC")
      let name = "MainMapStoryboard"

      func mainMapVC(_: Void = ()) -> MainMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainMapVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainMapStoryboard().mainMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainMapVC' could not be loaded from storyboard 'MainMapStoryboard' as 'MainMapViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registrationStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegistrationViewController

      let bundle = R.hostingBundle
      let name = "RegistrationStoryboard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "VioletLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VioletLight' is used in storyboard 'RegistrationStoryboard', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController

      let bundle = R.hostingBundle
      let name = "Root"
      let rootVC = StoryboardViewControllerResource<RootViewController>(identifier: "rootVC")

      func rootVC(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.root().rootVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootVC' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
