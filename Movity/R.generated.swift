//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `BottomSheetStoryboard`.
    static let bottomSheetStoryboard = _R.storyboard.bottomSheetStoryboard()
    /// Storyboard `CustomAlert`.
    static let customAlert = _R.storyboard.customAlert()
    /// Storyboard `CustomProgressHud`.
    static let customProgressHud = _R.storyboard.customProgressHud()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginStoryboard`.
    static let loginStoryboard = _R.storyboard.loginStoryboard()
    /// Storyboard `MainMapStoryboard`.
    static let mainMapStoryboard = _R.storyboard.mainMapStoryboard()
    /// Storyboard `ProfileStoryboard`.
    static let profileStoryboard = _R.storyboard.profileStoryboard()
    /// Storyboard `RegistrationStoryboard`.
    static let registrationStoryboard = _R.storyboard.registrationStoryboard()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BottomSheetStoryboard", bundle: ...)`
    static func bottomSheetStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bottomSheetStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomAlert", bundle: ...)`
    static func customAlert(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customAlert)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CustomProgressHud", bundle: ...)`
    static func customProgressHud(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.customProgressHud)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginStoryboard", bundle: ...)`
    static func loginStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainMapStoryboard", bundle: ...)`
    static func mainMapStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainMapStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileStoryboard", bundle: ...)`
    static func profileStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RegistrationStoryboard", bundle: ...)`
    static func registrationStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registrationStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 14 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `AppBlue`.
    static let appBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppBlue")
    /// Color `AppDisabledGray`.
    static let appDisabledGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppDisabledGray")
    /// Color `AppGreen`.
    static let appGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGreen")
    /// Color `AppLightGray`.
    static let appLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppLightGray")
    /// Color `AppOrange`.
    static let appOrange = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppOrange")
    /// Color `AppPlaceHolderGray`.
    static let appPlaceHolderGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppPlaceHolderGray")
    /// Color `AppRed`.
    static let appRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppRed")
    /// Color `AppWhite`.
    static let appWhite = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppWhite")
    /// Color `LabelGray`.
    static let labelGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "LabelGray")
    /// Color `SwitchThumb`.
    static let switchThumb = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwitchThumb")
    /// Color `SwitchTrack`.
    static let switchTrack = Rswift.ColorResource(bundle: R.hostingBundle, name: "SwitchTrack")
    /// Color `VioletLight`.
    static let violetLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "VioletLight")
    /// Color `appGray`.
    static let appGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "appGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppDisabledGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appDisabledGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appDisabledGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGreen", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppOrange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appOrange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appOrange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppPlaceHolderGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appPlaceHolderGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appPlaceHolderGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppRed", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppWhite", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appWhite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LabelGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwitchThumb", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchThumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SwitchTrack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchTrack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchTrack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "VioletLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func violetLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.violetLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "appGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppDisabledGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appDisabledGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appDisabledGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppGreen", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGreen(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGreen.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppLightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appLightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appLightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppOrange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appOrange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appOrange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppPlaceHolderGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appPlaceHolderGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appPlaceHolderGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppRed", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appRed(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appRed.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AppWhite", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appWhite(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appWhite.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LabelGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SwitchThumb", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchThumb(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchThumb.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SwitchTrack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchTrack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchTrack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "VioletLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func violetLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.violetLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "appGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func appGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.appGray.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GothaProBla.otf`.
    static let gothaProBlaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProBla", pathExtension: "otf")
    /// Resource file `GothaProBlaIta.otf`.
    static let gothaProBlaItaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProBlaIta", pathExtension: "otf")
    /// Resource file `GothaProBol.otf`.
    static let gothaProBolOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProBol", pathExtension: "otf")
    /// Resource file `GothaProBolIta.otf`.
    static let gothaProBolItaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProBolIta", pathExtension: "otf")
    /// Resource file `GothaProIta.otf`.
    static let gothaProItaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProIta", pathExtension: "otf")
    /// Resource file `GothaProLig.otf`.
    static let gothaProLigOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProLig", pathExtension: "otf")
    /// Resource file `GothaProLigIta.otf`.
    static let gothaProLigItaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProLigIta", pathExtension: "otf")
    /// Resource file `GothaProMed.otf`.
    static let gothaProMedOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProMed", pathExtension: "otf")
    /// Resource file `GothaProMedIta.otf`.
    static let gothaProMedItaOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProMedIta", pathExtension: "otf")
    /// Resource file `GothaProNarBol.otf`.
    static let gothaProNarBolOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProNarBol", pathExtension: "otf")
    /// Resource file `GothaProNarMed.otf`.
    static let gothaProNarMedOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProNarMed", pathExtension: "otf")
    /// Resource file `GothaProReg.otf`.
    static let gothaProRegOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothaProReg", pathExtension: "otf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProBla", withExtension: "otf")`
    static func gothaProBlaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProBlaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProBlaIta", withExtension: "otf")`
    static func gothaProBlaItaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProBlaItaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProBol", withExtension: "otf")`
    static func gothaProBolOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProBolOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProBolIta", withExtension: "otf")`
    static func gothaProBolItaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProBolItaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProIta", withExtension: "otf")`
    static func gothaProItaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProItaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProLig", withExtension: "otf")`
    static func gothaProLigOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProLigOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProLigIta", withExtension: "otf")`
    static func gothaProLigItaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProLigItaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProMed", withExtension: "otf")`
    static func gothaProMedOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProMedOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProMedIta", withExtension: "otf")`
    static func gothaProMedItaOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProMedItaOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProNarBol", withExtension: "otf")`
    static func gothaProNarBolOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProNarBolOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProNarMed", withExtension: "otf")`
    static func gothaProNarMedOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProNarMedOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothaProReg", withExtension: "otf")`
    static func gothaProRegOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothaProRegOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamPro-BlackItalic`.
    static let gothamProBlackItalic = Rswift.FontResource(fontName: "GothamPro-BlackItalic")
    /// Font `GothamPro-Black`.
    static let gothamProBlack = Rswift.FontResource(fontName: "GothamPro-Black")
    /// Font `GothamPro-BoldItalic`.
    static let gothamProBoldItalic = Rswift.FontResource(fontName: "GothamPro-BoldItalic")
    /// Font `GothamPro-Bold`.
    static let gothamProBold = Rswift.FontResource(fontName: "GothamPro-Bold")
    /// Font `GothamPro-Italic`.
    static let gothamProItalic = Rswift.FontResource(fontName: "GothamPro-Italic")
    /// Font `GothamPro-LightItalic`.
    static let gothamProLightItalic = Rswift.FontResource(fontName: "GothamPro-LightItalic")
    /// Font `GothamPro-Light`.
    static let gothamProLight = Rswift.FontResource(fontName: "GothamPro-Light")
    /// Font `GothamPro-MediumItalic`.
    static let gothamProMediumItalic = Rswift.FontResource(fontName: "GothamPro-MediumItalic")
    /// Font `GothamPro-Medium`.
    static let gothamProMedium = Rswift.FontResource(fontName: "GothamPro-Medium")
    /// Font `GothamProNarrow-Bold`.
    static let gothamProNarrowBold = Rswift.FontResource(fontName: "GothamProNarrow-Bold")
    /// Font `GothamProNarrow-Medium`.
    static let gothamProNarrowMedium = Rswift.FontResource(fontName: "GothamProNarrow-Medium")
    /// Font `GothamPro`.
    static let gothamPro = Rswift.FontResource(fontName: "GothamPro")

    /// `UIFont(name: "GothamPro", size: ...)`
    static func gothamPro(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamPro, size: size)
    }

    /// `UIFont(name: "GothamPro-Black", size: ...)`
    static func gothamProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBlack, size: size)
    }

    /// `UIFont(name: "GothamPro-BlackItalic", size: ...)`
    static func gothamProBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBlackItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Bold", size: ...)`
    static func gothamProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBold, size: size)
    }

    /// `UIFont(name: "GothamPro-BoldItalic", size: ...)`
    static func gothamProBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProBoldItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Italic", size: ...)`
    static func gothamProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Light", size: ...)`
    static func gothamProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProLight, size: size)
    }

    /// `UIFont(name: "GothamPro-LightItalic", size: ...)`
    static func gothamProLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProLightItalic, size: size)
    }

    /// `UIFont(name: "GothamPro-Medium", size: ...)`
    static func gothamProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMedium, size: size)
    }

    /// `UIFont(name: "GothamPro-MediumItalic", size: ...)`
    static func gothamProMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMediumItalic, size: size)
    }

    /// `UIFont(name: "GothamProNarrow-Bold", size: ...)`
    static func gothamProNarrowBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProNarrowBold, size: size)
    }

    /// `UIFont(name: "GothamProNarrow-Medium", size: ...)`
    static func gothamProNarrowMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProNarrowMedium, size: size)
    }

    static func validate() throws {
      if R.font.gothamPro(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro' could not be loaded, is 'GothaProReg.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Black' could not be loaded, is 'GothaProBla.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-BlackItalic' could not be loaded, is 'GothaProBlaIta.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Bold' could not be loaded, is 'GothaProBol.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-BoldItalic' could not be loaded, is 'GothaProBolIta.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Italic' could not be loaded, is 'GothaProIta.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Light' could not be loaded, is 'GothaProLig.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-LightItalic' could not be loaded, is 'GothaProLigIta.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Medium' could not be loaded, is 'GothaProMed.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-MediumItalic' could not be loaded, is 'GothaProMedIta.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProNarrowBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamProNarrow-Bold' could not be loaded, is 'GothaProNarBol.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProNarrowMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamProNarrow-Medium' could not be loaded, is 'GothaProNarMed.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 13 images.
  struct image {
    /// Image `bicyclePlacemark`.
    static let bicyclePlacemark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bicyclePlacemark")
    /// Image `bike`.
    static let bike = Rswift.ImageResource(bundle: R.hostingBundle, name: "bike")
    /// Image `bottom_sheet_upper`.
    static let bottom_sheet_upper = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_sheet_upper")
    /// Image `carPlacemark`.
    static let carPlacemark = Rswift.ImageResource(bundle: R.hostingBundle, name: "carPlacemark")
    /// Image `electricScooter`.
    static let electricScooter = Rswift.ImageResource(bundle: R.hostingBundle, name: "electricScooter")
    /// Image `empty_background`.
    static let empty_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty_background")
    /// Image `favorits_background`.
    static let favorits_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorits_background")
    /// Image `kiario`.
    static let kiario = Rswift.ImageResource(bundle: R.hostingBundle, name: "kiario")
    /// Image `kickScooterPlacemark`.
    static let kickScooterPlacemark = Rswift.ImageResource(bundle: R.hostingBundle, name: "kickScooterPlacemark")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `photoPlaceholder`.
    static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder")
    /// Image `toyotaCorolla`.
    static let toyotaCorolla = Rswift.ImageResource(bundle: R.hostingBundle, name: "toyotaCorolla")
    /// Image `volkswagenPolo`.
    static let volkswagenPolo = Rswift.ImageResource(bundle: R.hostingBundle, name: "volkswagenPolo")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bicyclePlacemark", bundle: ..., traitCollection: ...)`
    static func bicyclePlacemark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bicyclePlacemark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bike", bundle: ..., traitCollection: ...)`
    static func bike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bottom_sheet_upper", bundle: ..., traitCollection: ...)`
    static func bottom_sheet_upper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_sheet_upper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carPlacemark", bundle: ..., traitCollection: ...)`
    static func carPlacemark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carPlacemark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "electricScooter", bundle: ..., traitCollection: ...)`
    static func electricScooter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.electricScooter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "empty_background", bundle: ..., traitCollection: ...)`
    static func empty_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "favorits_background", bundle: ..., traitCollection: ...)`
    static func favorits_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorits_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kiario", bundle: ..., traitCollection: ...)`
    static func kiario(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kiario, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kickScooterPlacemark", bundle: ..., traitCollection: ...)`
    static func kickScooterPlacemark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kickScooterPlacemark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toyotaCorolla", bundle: ..., traitCollection: ...)`
    static func toyotaCorolla(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toyotaCorolla, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volkswagenPolo", bundle: ..., traitCollection: ...)`
    static func volkswagenPolo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volkswagenPolo, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "LoginStoryboard"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `StubView`.
    static let stubView = _R.nib._StubView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StubView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stubView) instead")
    static func stubView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stubView)
    }
    #endif

    static func stubView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
      return R.nib.stubView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _StubView.validate()
    }

    struct _StubView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StubView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StubView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StubView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "products_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'products_background' is used in nib 'StubView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try bottomSheetStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customAlert.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try customProgressHud.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainMapStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try registrationStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try root.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct bottomSheetStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BottomSheetViewController

      let bottomSheetViewController = StoryboardViewControllerResource<BottomSheetViewController>(identifier: "bottomSheetViewController")
      let bundle = R.hostingBundle
      let name = "BottomSheetStoryboard"

      func bottomSheetViewController(_: Void = ()) -> BottomSheetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottomSheetViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bottom_sheet_upper", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_sheet_upper' is used in storyboard 'BottomSheetStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kiario", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kiario' is used in storyboard 'BottomSheetStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "LabelGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LabelGray' is used in storyboard 'BottomSheetStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.bottomSheetStoryboard().bottomSheetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottomSheetViewController' could not be loaded from storyboard 'BottomSheetStoryboard' as 'BottomSheetViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customAlert: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomAlertViewController

      let bundle = R.hostingBundle
      let name = "CustomAlert"
      let paymentAlertVC = StoryboardViewControllerResource<CustomAlertViewController>(identifier: "paymentAlertVC")

      func paymentAlertVC(_: Void = ()) -> CustomAlertViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentAlertVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppBlue' is used in storyboard 'CustomAlert', but couldn't be loaded.") }
          if UIKit.UIColor(named: "AppPlaceHolderGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppPlaceHolderGray' is used in storyboard 'CustomAlert', but couldn't be loaded.") }
        }
        if _R.storyboard.customAlert().paymentAlertVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentAlertVC' could not be loaded from storyboard 'CustomAlert' as 'CustomAlertViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct customProgressHud: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let customProgressHud = StoryboardViewControllerResource<ProgressHudViewController>(identifier: "customProgressHud")
      let name = "CustomProgressHud"

      func customProgressHud(_: Void = ()) -> ProgressHudViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: customProgressHud)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "purple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'purple' is used in storyboard 'CustomProgressHud', but couldn't be loaded.") }
        }
        if _R.storyboard.customProgressHud().customProgressHud() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'customProgressHud' could not be loaded from storyboard 'CustomProgressHud' as 'ProgressHudViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "loginViewController")
      let name = "LoginStoryboard"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppWhite' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "LabelGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'LabelGray' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
          if UIKit.UIColor(named: "VioletLight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'VioletLight' is used in storyboard 'LoginStoryboard', but couldn't be loaded.") }
        }
        if _R.storyboard.loginStoryboard().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginStoryboard' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainMapStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainMapViewController

      let bundle = R.hostingBundle
      let mainMapVC = StoryboardViewControllerResource<MainMapViewController>(identifier: "mainMapVC")
      let name = "MainMapStoryboard"

      func mainMapVC(_: Void = ()) -> MainMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainMapVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainMapStoryboard().mainMapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainMapVC' could not be loaded from storyboard 'MainMapStoryboard' as 'MainMapViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "ProfileStoryboard"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "profileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profileStoryboard().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'ProfileStoryboard' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct registrationStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegistrationViewController

      let bundle = R.hostingBundle
      let name = "RegistrationStoryboard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController

      let bundle = R.hostingBundle
      let name = "Root"
      let rootVC = StoryboardViewControllerResource<RootViewController>(identifier: "rootVC")

      func rootVC(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootVC)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "book") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'book' is used in storyboard 'Root', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'person' is used in storyboard 'Root', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.root().rootVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootVC' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
